const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const versionFilePath = path.join(__dirname, '../src/environments/version.ts');

try {
  const commitHash = execSync('git rev-parse --short HEAD').toString().trim();
  const content = `// This file is automatically generated by generate-version.js
// Do not edit this file manually.

export const GIT_COMMIT_HASH = '${commitHash}';
`;

  fs.writeFileSync(versionFilePath, content, { encoding: 'utf8' });
  console.log(`Successfully wrote git commit hash ${commitHash} to ${versionFilePath}`);
} catch (error) {
  console.error('Failed to generate version file:', error);
  // Create a fallback version file if git command fails or an error occurs
  const fallbackContent = `// This file is a fallback generated by generate-version.js
// An error occurred while trying to get the git commit hash.

export const GIT_COMMIT_HASH = 'unavailable';
`;
  try {
    fs.writeFileSync(versionFilePath, fallbackContent, { encoding: 'utf8' });
    console.log(`Successfully wrote fallback version 'unavailable' to ${versionFilePath}`);
  } catch (fallbackError) {
    console.error('Failed to write fallback version file:', fallbackError);
    // If even fallback fails, there's not much more we can do in this script.
    // The build might fail if version.ts is expected but not present.
  }
  // It's important to exit with an error code if the primary operation failed,
  // so CI/CD pipelines or build scripts can be aware of the issue.
  process.exit(1);
}
